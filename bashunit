#!/bin/bash
# Copyright 2020 Zygmunt Krynicki.
#
# This file is part of bashcov.
#
# Bashcov is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License.
#
# Bashcov is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Bashcov.  If not, see <https://www.gnu.org/licenses/>.

declare -A -i cov_files  # set of files encountered
declare -A -i cov_lines  # count of file:line pairs executed

# junit log file, if junit logging is captured
declare junit_log=${junit_log:=/dev/null}

# bashunit_parse_trace parses trace given on stdin.
#
# Traces for files matching *_test.sh are ignored.
bashunit_parse_trace() {
	local fname
	local line
	local lineno
	while IFS= read -r line; do
		# Strip the command being executed after "#"
		line="${line%%#*}"
		# Strip leading "+" characters, indicating indirection depth.
		# Given that we want to strip exactly /[+]+/ we use extglob for that.
		shopt -s extglob
		line="${line##+(+)}"
		shopt -u extglob
		# Extract file name and line number separated by a colon.
		fname="${line%%:*}"
		case "$fname" in
			/*)
				# Computing coverage of thins sourced with absolute path
				# is probably not useful (external programs, etc).
				continue
				;;
			*_test.sh)
				# Computing coverage of *_test.sh files is not useful.
				continue
				;;
			'')
				# Skip trace lines corresponding to unknown files.
				# Those correspond to bash -c "..." statements.
				continue
				;;
			*)
				lineno="${line##*:}"
				cov_files[$fname]=1
				cov_lines[$fname:$lineno]=$(( "${cov_lines[$fname:$lineno]}" + 1 ))
				;;
		esac
	done
}

# bashunit_trace_call uses a sub-shell to source a script and executes arbitrary command with tracing
bashunit_trace_call() {
	local trace_file
	local script

	trace_file="$1"
	script="$2"
	shift 2

	(
		BASH_XTRACEFD=3
		PS4='+$BASH_SOURCE:$LINENO# '
		set -e
		set -x
		# shellcheck disable=SC1090
		. "$script"
		"$@"
	) 3>"$trace_file"
}

# bashunit_render_coverage uses cov_files and cov_lines to create .coverage files.
bashunit_render_coverage() {
	local fname
	local lineno
	for fname in "${!cov_files[@]}"; do
		lineno=0
		test -f "$fname" && while IFS= read -r line; do
			((++lineno))
			printf "%3s: %s\\n" "${cov_lines[$fname:$lineno]:--}" "$line"
		done <"$fname" >"$fname.coverage"
	done
}

# bashunit_run_tests runs all the functions starting with "test_"
bashunit_run_tests() {
	local trace_dir="$1"
	local script="$2"
	local def
	local name
	local debug_line
	local retval
	local final_retval
	local total_count=0
	local error_count=0

	echo "bashunit: sourcing $script"
	echo "s: $script" >>"$junit_log"
	# shellcheck disable=SC1090
	while IFS= read -r def; do
		name="${def##declare -f }"
		case "$name" in
			test_*)
				((++total_count))
				echo "c: $name" >>"$junit_log"
				echo "bashunit: calling $name"
				# Run each test in a separate shell for isolation and for
				# better output control. The actual test function runs under
				# tracing which is displayed on failure.
				bashunit_trace_call "$trace_dir/$script.$name.xtrace" "$script" "$name" &>"$trace_dir/$script.$name.log"
				retval=$?
				final_retval=$((final_retval | retval))
				if [ "$retval" -ne 0 ]; then
					((++error_count))
					echo "f:" >>"$junit_log"
					echo "bashunit: calling $name resulted in exit code $retval" >&2
					if [ -s "$trace_dir/$script.$name.log" ]; then
						echo "bashunit: output of execution of $name" >&2
						while IFS= read -r debug_line; do
							echo "bashunit:    $debug_line" >&2
						done < "$trace_dir/$script.$name.log"
						while IFS= read -r debug_line; do
							echo "O: $debug_line" >>"$junit_log"
						done < <(tac "$trace_dir/$script.$name.log")
					fi
					echo "bashunit: trace of execution of $name" >&2
					while IFS= read -r debug_line; do
						# Show only the subset of the trace relevant to the
						# script file and strip the non-standard trace prefix.
						if [[ $debug_line =~ [+]+$script:[0-9]+# ]]; then
							shopt -s extglob
							debug_line="${debug_line/$script:+([0-9])#}"
							shopt -u extglob
							echo "bashunit:    $debug_line" >&2
						fi
					done < "$trace_dir/$script.$name.xtrace"
					while IFS= read -r debug_line; do
						if [[ $debug_line =~ [+]+$script:[0-9]+# ]]; then
							shopt -s extglob
							debug_line="${debug_line/$script:+([0-9])#}"
							shopt -u extglob
							echo "E: $debug_line" >>"$junit_log"
						fi
					done < <(tac "$trace_dir/$script.$name.xtrace")
					echo "F: calling $name resulted in exit code $retval" >>"$junit_log"
				fi
				echo "C: $name $retval" >>"$junit_log"
				;;
		esac
	done < <( . "$script" && declare -F )
	echo "S: $script $total_count $error_count" >>"$junit_log"
	return "$final_retval"
}

junit_message() {
	printf '\t\t\t\t%s\n' "$(printf %s "$1" | sed -e 's/&/&amp;/g' -e 's/</&lt;/g' -e 's/>/&gt;/g')"
}

junit_failure() {
	printf '\t\t\t<failure type="error" message="%s">\n' "$1"
	local has_stdout
	local has_stderr
	while IFS= read -r line; do
		case "${line:0:1}" in
			O)
				if [ -n "$has_stderr" ]; then
					printf '\t\t\t\t</system-err>\n'
					has_stderr=
				fi
				if [ -z "$has_stdout" ]; then
					printf '\t\t\t\t<system-out>\n'
					has_stdout=yes
				fi
				junit_message "${line:3}"
				;;
			E)
				if [ -n "$has_stdout" ]; then
					printf '\t\t\t\t</system-out>\n'
					has_stdout=
				fi
				if [ -z "$has_stderr" ]; then
					printf '\t\t\t\t<system-err>\n'
					has_stderr=yes
				fi
				junit_message "${line:3}"
				;;
			*)
				break
				;;
		esac
	done
	if [ -n "$has_stdout" ]; then
		printf '\t\t\t\t</system-out>\n'
	fi
	if [ -n "$has_stderr" ]; then
		printf '\t\t\t\t</system-err>\n'
	fi
	printf '\t\t\t</failure>\n'
}

junit_testcase() {
	local testcase_name="$1"
	printf '\t\t<testcase name="%s">\n' "$testcase_name"
	while IFS= read -r line; do
		case "${line:0:1}" in
			F)
				junit_failure "${line:3}"
				;;
			*)
				break
				;;
		esac
	done
	printf '\t\t</testcase>\n'
}

junit_testsuite() {
	local testsuite_name="$1"
	local total_count="$2"
	local error_count="$3"
	printf '\t<testsuite name="%s" tests="%d" errors="%d">\n' "$testsuite_name" "$total_count" "$error_count"
	while IFS= read -r line; do
		case "${line:0:1}" in
			C)
				local testcase_name
				testcase_name=$(echo "${line:3}" | cut -d ' ' -f 1)
				junit_testcase "$testcase_name"
				;;
			*)
				break
				;;
		esac
	done
	printf '\t</testsuite>\n'
}

junit_testsuites() {
	printf '<?xml version="1.0" encoding="UTF-8"?>\n'
	printf '<testsuites>\n'
	local line
	while IFS= read -r line; do
		case "${line:0:1}" in
			S)
				local testsuite_name
				local total_count
				local error_count
				testsuite_name=$(echo "${line:3}" | cut -d ' ' -f 1)
				total_count=$(echo "${line:3}" | cut -d ' ' -f 2)
				error_count=$(echo "${line:3}" | cut -d ' ' -f 3)
				junit_testsuite "$testsuite_name" "$total_count" "$error_count"
				;;
			*)
				break
				;;
		esac
	done
	printf '</testsuites>\n'
}

bashunit_to_junit() {
	junit_testsuites
}

bashunit_main() {
	local trace_dir
	local trace_file
	local script
	local retval

	trace_dir="$(mktemp --tmpdir -d bashunit.XXXXXXXXXX)"
	# shellcheck disable=SC2064
	trap "rm -rf $trace_dir" RETURN

	junit_log=bashunit.junit.log
	truncate -s 0 "$junit_log"

	retval=0
	for script in *_test.sh; do
		bashunit_run_tests "$trace_dir" "$script"
		retval=$((retval | $?))
	done

	tac bashunit.junit.log | bashunit_to_junit >bashunit.junit.xml

	shopt -s nullglob
	for trace_file in "$trace_dir"/*.xtrace; do
		bashunit_parse_trace < "$trace_file"
	done
	shopt -u nullglob
	rm -f "*.coverage"
	bashunit_render_coverage
	return "$retval"
}

# When we are executed (as opposed to being sourced), run main.
if [ "${0##*/}" = bashunit ]; then
	bashunit_main "$@"
fi
